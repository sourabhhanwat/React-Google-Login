{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","_this","Object","classCallCheck","this","_super","call","responseGoogle","response","setState","userDetails","profileObj","isUserLoggedIn","console","log","logout","info","state","givenName","react_default","a","createElement","className","google_login_default","clientId","render","renderProps","onClick","disabled","onSuccess","onFailure","google_login","onLogoutSuccess","src","imageUrl","alt","familyName","email","React","Component","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kOA+EeA,2DAzEb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAI,EAAAC,KAAAF,OAOFG,eAAiB,SAAAC,GACfP,EAAKQ,SAAS,CAAEC,YAAaF,EAASG,WAAYC,gBAAgB,IAClEC,QAAQC,IAAIN,EAASG,aAVTV,EAadc,OAAS,WACPd,EAAKQ,SAAS,CAACG,gBAAgB,KAdnBX,EAiBde,KAAO,WACLH,QAAQC,IAAIb,EAAKgB,MAAMP,YAAYQ,YAhBnCjB,EAAKgB,MAAQ,CACXP,YAAa,GACbE,gBAAgB,GAJNX,uDAsBZ,OACEkB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXlB,KAAKa,MAAML,gBACXO,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CACEI,SAAS,2EACTC,OAAQ,SAAAC,GAAW,OACjBP,EAAAC,EAAAC,cAAA,UACEC,UAAU,SACVK,QAASD,EAAYC,QACrBC,SAAUF,EAAYE,UAHxB,iBAQFC,UAAWzB,KAAKG,eAChBuB,UAAW1B,KAAKG,iBAGnBH,KAAKa,MAAML,gBACVO,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAACU,EAAA,aAAD,CACEN,OAAQ,SAAAC,GAAW,OACjBP,EAAAC,EAAAC,cAAA,UACEC,UAAU,gBACVK,QAASD,EAAYC,SAFvB,YAOFK,gBAAiB5B,KAAKW,SAGxBI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,OAAKY,IAAK7B,KAAKa,MAAMP,YAAYwB,SAAUC,IAAK/B,KAAKa,MAAMP,YAAYQ,aAEzEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAf,eACelB,KAAKa,MAAMP,YAAYQ,UAAW,IAC9Cd,KAAKa,MAAMP,YAAY0B,YAE1BjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAAQH,EAAAC,EAAAC,cAAA,SAAIjB,KAAKa,MAAMP,YAAY2B,SAEpDlB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAlETgB,IAAMC,YCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASpB,OAAON,EAAAC,EAAAC,cAACyB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.4fc79ee6.chunk.js","sourcesContent":["import React from \"react\";\nimport GoogleLogin from \"react-google-login\";\nimport { GoogleLogout } from \"react-google-login\";\nimport \"./App.scss\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      userDetails: {},\n      isUserLoggedIn: false\n    };\n  }\n\n  responseGoogle = response => {\n    this.setState({ userDetails: response.profileObj, isUserLoggedIn: true });\n    console.log(response.profileObj);\n  };\n\n  logout = () => {\n    this.setState({isUserLoggedIn: false})\n  };\n\n  info = () => {\n    console.log(this.state.userDetails.givenName);\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        {!this.state.isUserLoggedIn && (\n          <GoogleLogin\n            clientId=\"776070248769-b4houskf848vu8t013f0pajvtf402hu4.apps.googleusercontent.com\" //TO BE CREATED\n            render={renderProps => (\n              <button\n                className=\"button\"\n                onClick={renderProps.onClick}\n                disabled={renderProps.disabled}\n              >\n                Google Login\n              </button>\n            )}\n            onSuccess={this.responseGoogle}\n            onFailure={this.responseGoogle}\n          />\n        )}\n        {this.state.isUserLoggedIn && (\n          <div className=\"userDetails-wrapper\">\n            <div className=\"details-wrapper\">\n              <GoogleLogout\n                render={renderProps => (\n                  <button\n                    className=\"logout-button\"\n                    onClick={renderProps.onClick}\n                  >\n                    Log Out\n                  </button>\n                )}\n                onLogoutSuccess={this.logout}\n              />\n\n              <div className=\"image\">\n                <img src={this.state.userDetails.imageUrl} alt={this.state.userDetails.givenName}/>\n              </div>\n              <div className=\"name\">\n                Welcome Mr. {this.state.userDetails.givenName}{\" \"}\n                {this.state.userDetails.familyName}\n              </div>\n              <div className=\"email\"><i>{this.state.userDetails.email}</i></div>\n            </div>\n            <div className=\"bar\" />\n            <div className=\"stand\" />\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}